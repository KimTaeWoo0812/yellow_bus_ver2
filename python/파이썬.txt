# -*- coding: utf-8 -*-

# test BLE Scanning software

 

import blescan

import bluetooth._bluetooth as bluez

from socket import *

import threading

import sys

import time

from datetime import datetime

reload(sys)

sys.setdefaultencoding('utf-8')

 

def GetDate():

        return datetime.today().strftime('%m%d')

        

_del='#'

arr=[[0 for col in range(5)] for row in range(500)]

strArr=[0 for col in range(500)]

arrSize=0

HOST = '192.168.0.6'

PORT=50001

BUFSIZE=1024

ADDR=(HOST,PORT)

 

 

#################################################

#################################################

####make here 'Push function' in the Send_useing_GCM

#################################################

#################################################

 

def Send_useing_GCM(gcm_id, text):

        print 'GCM'

        print text

        

        

class Socket_Thread(threading.Thread):

        def __init__(self,arrSize,switch,name,msg):

                threading.Thread.__init__(self)

                self.arrSize = arrSize

                self.switch = switch

                self.name=name

                self.msg=msg

                        

        def run(self):

                #print '==========================='

                #print self.name

                #print self.msg

                #print '==========================='

                getMsg = ' ';

                timeoutCount=0

                while True:

                        try:

                                ADDR=(HOST,PORT)

                                udpCliSock=socket(AF_INET,SOCK_DGRAM)

                                udpCliSock.settimeout(3)

 

                                #send                                

                                udpCliSock.sendto(self.msg,ADDR)

                                print 'Send msg: '+self.msg

                                #recv

                                getMsg,ADDR=udpCliSock.recvfrom(BUFSIZE)

                                print'\t\tGet msg: '+getMsg

 

                                msg = getMsg.split(_del)

                                ## 1 = gcm_id, 2 = text

 

 

                                if msg[1] == '0':

                                        return

                                elif msg[1] == '1':

                                        if self.switch == 1:

                                                arr[self.arrSize-1][1] = '2'

                                                return

                                        else:

                                                arr[self.arrSize-1][1] = '1'

                                                return

 

                                arr[self.arrSize-1][3] = msg[1]

                                strArr[self.arrSize-1] = msg[2]

 

                                text = 'aaa'

 

                                if self.switch == 0:

                                        

                                        #kor = unicode('등원 했습니다.','utf-8')

                                        kor = str(unicode('등원 했습니다.','utf-8').encode('utf-8'))

                                        

                                        text = msg[2]+ kor

                                        #kor.decode('utf-8').encode('utf-8')

                                else:

                                        kor = str(unicode('하원 했습니다.','utf-8').encode('utf-8'))

                                        

                                        text = msg[2]+ kor

 

                                #print text

                                #print msg[1]

                                Send_useing_GCM(msg[1],text)

                                return

                                

                        except timeout:

                                #print 'time out ... timeoutCount: '+timeoutCount

                                if timeoutCount > 10:

                                        break

                                       

                                timeoutCount=timeoutCount+1

                                #udpCliSock.close()

                                

                        except KeyboardInterrupt:

                                udpCliSock.close()

                                sys.exit()

                                

 

 

def startSending(beacon,switch,arrSize):

                

 

        if switch == 0:

                socketThread = Socket_Thread(arrSize,switch,beacon,'PUSH' + _del + '0' + _del + b[2]+b[3] + _del + '\n')

        elif switch == 1:

                socketThread = Socket_Thread(arrSize,switch,beacon,'PUSH' + _del + '1' + _del + b[2]+b[3] + _del + '\n')

        elif switch == 2:

                socketThread = Socket_Thread(arrSize,switch,beacon,'PUSH' + _del + '2' + _del + b[2]+b[3] + _del + '\n')

        socketThread.start()

 

## arr 0 = beacon, 1 = type 2 = date 3 = gcm_id 4 = text

def IsSaved(beacon,switch):

        i=0

        flag = 0

        while i < arrSize:

                if beacon == arr[i][0]: # saved?

                        if GetDate() != arr[i][2]: #did not today?

                                if switch == int(arr[i][1]):

                                        #print 'in the IsSaved'

                                        #print arr[i][0]

                                        #print arr[i][1]

                                        #print arr[i][2]

 

                                        if switch == 0:

                                                kor = str(unicode('등원 했습니다.','utf-8').encode('utf-8'))

                                        

                                                text = strArr[i]+kor

                                        else:

                                                kor = str(unicode('하원 했습니다.','utf-8').encode('utf-8'))

                                        

                                                #print strArr[i]

                                                #print kor

                                                text = strArr[i]+kor

                                                

 

                                        Send_useing_GCM(arr[i][3],text)   

                                        return 1 #no send to server

                                else: #no same type

                                        #print 'No same type'

                                        return 1 

                        else: # No! It was today!

                                #print 'No! It was today!'

                                return 1 #do not anything

                                  

                i=i+1

        #print 'have not saved, send to server!'

        return 0 #have not saved, send to server!

 

 

dev_id = 0

try:

	sock = bluez.hci_open_dev(dev_id)

	print "ble thread started"

 

except:

	print "error accessing bluetooth device..."

    	sys.exit(1)

 

blescan.hci_le_set_scan_parameters(sock)

blescan.hci_enable_le_scan(sock)

 

while True:

	returnedList = blescan.parse_events(sock, 1)

	# 2, 3

	if len(returnedList) >= 1:

                beacon = returnedList[0]

                

                #####################################################

                #####################################################

                ######## must make about swith on / off  -> flag#####

                #####################################################

                #####################################################

                

                switch = 1

                

                

                check = 0

                b=beacon.split(',')

                beacon = b[2]+b[3]

                

                #is saved?

                check = IsSaved(beacon,switch)

 

                if check == 0:

                        arr[arrSize][0] = beacon

                        arr[arrSize][1] = switch

                        arr[arrSize][2] = GetDate()

                        arrSize = arrSize+1

                                

                        startSending(beacon,switch,arrSize)

                        

                #else: #already saved

                        #do not enything
